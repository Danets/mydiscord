// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id       String @id @default(cuid())
  userId   String @unique
  name     String
  imageUrl String @map("image_url") @db.Text
  email    String @db.Text

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  servers   Server[]
  members   Member[]
  channels  Channel[]

  @@map("profile")
}

model Server {
  id         String @id @default(cuid())
  name       String
  imageUrl   String @map("image_url") @db.Text
  inviteCode String @map("invite_code") @db.Text

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  members  Member[]
  channels Channel[]

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@map("server")
}

enum MemberRole {
  admin
  moderator
  guest
}

model Member {
  id   String     @id @default(cuid())
  role MemberRole @default(guest)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([serverId])
  @@map("member")
}

enum ChannelType {
  text
  audio
  video
}

model Channel {
  id   String      @id @default(cuid())
  name String
  type ChannelType @default(text)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([serverId])
  @@map("channel")
}
